package com.tiancaijiazu.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TO_KEN_DAO_BEAN".
*/
public class ToKenDaoBeanDao extends AbstractDao<ToKenDaoBean, Long> {

    public static final String TABLENAME = "TO_KEN_DAO_BEAN";

    /**
     * Properties of entity ToKenDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Access_token = new Property(1, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Refresh_token = new Property(2, String.class, "refresh_token", false, "REFRESH_TOKEN");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Validtime = new Property(4, String.class, "validtime", false, "VALIDTIME");
    }


    public ToKenDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ToKenDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TO_KEN_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCESS_TOKEN\" TEXT," + // 1: access_token
                "\"REFRESH_TOKEN\" TEXT," + // 2: refresh_token
                "\"TIME\" TEXT," + // 3: time
                "\"VALIDTIME\" TEXT);"); // 4: validtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_KEN_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ToKenDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(2, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(3, refresh_token);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String validtime = entity.getValidtime();
        if (validtime != null) {
            stmt.bindString(5, validtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ToKenDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(2, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(3, refresh_token);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String validtime = entity.getValidtime();
        if (validtime != null) {
            stmt.bindString(5, validtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ToKenDaoBean readEntity(Cursor cursor, int offset) {
        ToKenDaoBean entity = new ToKenDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // access_token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // refresh_token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // validtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ToKenDaoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccess_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRefresh_token(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValidtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ToKenDaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ToKenDaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ToKenDaoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
